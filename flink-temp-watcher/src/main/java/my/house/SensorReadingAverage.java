/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package my.house;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/** Avro schema for holding sensor reading average. */
@org.apache.avro.specific.AvroGenerated
public class SensorReadingAverage extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7926514499388075236L;

  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"SensorReadingAverage\",\"namespace\":\"my.house\",\"doc\":\"Avro schema for holding sensor reading average.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sensorId\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"float\"},{\"name\":\"datetimeMs\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  static {
    MODEL$.addLogicalTypeConversion(
        new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SensorReadingAverage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorReadingAverage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorReadingAverage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorReadingAverage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorReadingAverage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorReadingAverage to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorReadingAverage from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorReadingAverage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static SensorReadingAverage fromByteBuffer(java.nio.ByteBuffer b)
      throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence name;
  private int sensorId;
  private float temperature;
  private java.time.Instant datetimeMs;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public SensorReadingAverage() {}

  /**
   * All-args constructor.
   *
   * @param name The new value for name
   * @param sensorId The new value for sensorId
   * @param temperature The new value for temperature
   * @param datetimeMs The new value for datetimeMs
   */
  public SensorReadingAverage(
      java.lang.CharSequence name,
      java.lang.Integer sensorId,
      java.lang.Float temperature,
      java.time.Instant datetimeMs) {
    this.name = name;
    this.sensorId = sensorId;
    this.temperature = temperature;
    this.datetimeMs = datetimeMs.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return name;
      case 1:
        return sensorId;
      case 2:
        return temperature;
      case 3:
        return datetimeMs;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
        null, null, null, new org.apache.avro.data.TimeConversions.TimestampMillisConversion(), null
      };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        name = (java.lang.CharSequence) value$;
        break;
      case 1:
        sensorId = (java.lang.Integer) value$;
        break;
      case 2:
        temperature = (java.lang.Float) value$;
        break;
      case 3:
        datetimeMs = (java.time.Instant) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   *
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   *
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sensorId' field.
   *
   * @return The value of the 'sensorId' field.
   */
  public int getSensorId() {
    return sensorId;
  }

  /**
   * Sets the value of the 'sensorId' field.
   *
   * @param value the value to set.
   */
  public void setSensorId(int value) {
    this.sensorId = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   *
   * @return The value of the 'temperature' field.
   */
  public float getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   *
   * @param value the value to set.
   */
  public void setTemperature(float value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'datetimeMs' field.
   *
   * @return The value of the 'datetimeMs' field.
   */
  public java.time.Instant getDatetimeMs() {
    return datetimeMs;
  }

  /**
   * Sets the value of the 'datetimeMs' field.
   *
   * @param value the value to set.
   */
  public void setDatetimeMs(java.time.Instant value) {
    this.datetimeMs = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new SensorReadingAverage RecordBuilder.
   *
   * @return A new SensorReadingAverage RecordBuilder
   */
  public static my.house.SensorReadingAverage.Builder newBuilder() {
    return new my.house.SensorReadingAverage.Builder();
  }

  /**
   * Creates a new SensorReadingAverage RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new SensorReadingAverage RecordBuilder
   */
  public static my.house.SensorReadingAverage.Builder newBuilder(
      my.house.SensorReadingAverage.Builder other) {
    if (other == null) {
      return new my.house.SensorReadingAverage.Builder();
    } else {
      return new my.house.SensorReadingAverage.Builder(other);
    }
  }

  /**
   * Creates a new SensorReadingAverage RecordBuilder by copying an existing SensorReadingAverage
   * instance.
   *
   * @param other The existing instance to copy.
   * @return A new SensorReadingAverage RecordBuilder
   */
  public static my.house.SensorReadingAverage.Builder newBuilder(
      my.house.SensorReadingAverage other) {
    if (other == null) {
      return new my.house.SensorReadingAverage.Builder();
    } else {
      return new my.house.SensorReadingAverage.Builder(other);
    }
  }

  /** RecordBuilder for SensorReadingAverage instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorReadingAverage>
      implements org.apache.avro.data.RecordBuilder<SensorReadingAverage> {

    private java.lang.CharSequence name;
    private int sensorId;
    private float temperature;
    private java.time.Instant datetimeMs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(my.house.SensorReadingAverage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[1].schema(), other.sensorId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.datetimeMs)) {
        this.datetimeMs = data().deepCopy(fields()[3].schema(), other.datetimeMs);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing SensorReadingAverage instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(my.house.SensorReadingAverage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sensorId)) {
        this.sensorId = data().deepCopy(fields()[1].schema(), other.sensorId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperature)) {
        this.temperature = data().deepCopy(fields()[2].schema(), other.temperature);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datetimeMs)) {
        this.datetimeMs = data().deepCopy(fields()[3].schema(), other.datetimeMs);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Gets the value of the 'name' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
     * Sets the value of the 'name' field.
     *
     * @param value The value of 'name'.
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'name' field has been set.
     *
     * @return True if the 'name' field has been set, false otherwise.
     */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'name' field.
     *
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'sensorId' field.
     *
     * @return The value.
     */
    public int getSensorId() {
      return sensorId;
    }

    /**
     * Sets the value of the 'sensorId' field.
     *
     * @param value The value of 'sensorId'.
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder setSensorId(int value) {
      validate(fields()[1], value);
      this.sensorId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'sensorId' field has been set.
     *
     * @return True if the 'sensorId' field has been set, false otherwise.
     */
    public boolean hasSensorId() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'sensorId' field.
     *
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder clearSensorId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'temperature' field.
     *
     * @return The value.
     */
    public float getTemperature() {
      return temperature;
    }

    /**
     * Sets the value of the 'temperature' field.
     *
     * @param value The value of 'temperature'.
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder setTemperature(float value) {
      validate(fields()[2], value);
      this.temperature = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'temperature' field has been set.
     *
     * @return True if the 'temperature' field has been set, false otherwise.
     */
    public boolean hasTemperature() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'temperature' field.
     *
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder clearTemperature() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'datetimeMs' field.
     *
     * @return The value.
     */
    public java.time.Instant getDatetimeMs() {
      return datetimeMs;
    }

    /**
     * Sets the value of the 'datetimeMs' field.
     *
     * @param value The value of 'datetimeMs'.
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder setDatetimeMs(java.time.Instant value) {
      validate(fields()[3], value);
      this.datetimeMs = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'datetimeMs' field has been set.
     *
     * @return True if the 'datetimeMs' field has been set, false otherwise.
     */
    public boolean hasDatetimeMs() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'datetimeMs' field.
     *
     * @return This builder.
     */
    public my.house.SensorReadingAverage.Builder clearDatetimeMs() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorReadingAverage build() {
      try {
        SensorReadingAverage record = new SensorReadingAverage();
        record.name =
            fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sensorId =
            fieldSetFlags()[1] ? this.sensorId : (java.lang.Integer) defaultValue(fields()[1]);
        record.temperature =
            fieldSetFlags()[2] ? this.temperature : (java.lang.Float) defaultValue(fields()[2]);
        record.datetimeMs =
            fieldSetFlags()[3] ? this.datetimeMs : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorReadingAverage> WRITER$ =
      (org.apache.avro.io.DatumWriter<SensorReadingAverage>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorReadingAverage> READER$ =
      (org.apache.avro.io.DatumReader<SensorReadingAverage>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
